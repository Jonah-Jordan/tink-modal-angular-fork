/*! tink-modal-angular v1.0.2 */
"use strict";!function(module){try{module=angular.module("tink.modal")}catch(e){module=angular.module("tink.modal",[])}module.directive("tinkModal",["$modal",function($modal){return{restrict:"A",scope:{tinkModalSuccess:"=",tinkModalDismiss:"="},link:function(scope,element,attr){function openModal(template){var modalInstance=$modal.open({templateUrl:template});void 0!==scope.tinkModalSucces&&"function"!=typeof scope.tinkModalSuccess&&(scope.tinkModalSuccess=null),void 0!==scope.tinkModalDismiss&&"function"!=typeof scope.tinkModalDismiss&&(scope.tinkModalDismiss=null),modalInstance.result.then(scope.tinkModalSuccess,scope.tinkModalDismiss)}attr.tinkModalTemplate&&element.bind("click",function(){scope.$apply(function(){openModal(attr.tinkModalTemplate)})})}}}])}(),function(module){try{module=angular.module("tink.modal")}catch(e){module=angular.module("tink.modal",[])}module.provider("$modal",function(){var defaults=this.defaults={element:null},openInstance=null;this.$get=function($http,$q,$rootScope,$templateCache,$compile,$animate,$window,$controller,$injector){function fetchTemplate(template){return fetchPromises[template]?fetchPromises[template]:fetchPromises[template]=$http.get(template,{cache:$templateCache}).then(function(res){return res.data})}function fetchResolvePromises(resolves){var promisesArr=[];return angular.forEach(resolves,function(value){(angular.isFunction(value)||angular.isArray(value))&&promisesArr.push($q.when($injector.invoke(value)))}),promisesArr}function createModalWindow(content){var modelView=angular.element('<div class="modal" tabindex="-1" role="dialog"><div class="modal-dialog"><div class="modal-content"></div></div></div>');return modelView.find(".modal-content").html(content),modelView}function enterModal(model,instance){function show(){var linker=$compile(createModalWindow(instance.content)),content=linker(instance.scope,function(){});model.$element=content,$(htmlElement).addClass("has-open-modal"),bodyElement.bind("keyup",function(e){instance.scope.$apply(function(){27===e.which&&model.dismiss("esc")})}),model.$element.bind("click",function(e){var view=$(this);instance.scope.$apply(function(){e.target===view.get(0)&&model.dismiss("backdrop")})}),$animate.enter(content,bodyElement,null),openInstance={element:content,scope:instance.scope}}null!==openInstance?leaveModal(openInstance).then(function(){show()}):show()}function leaveModal(modal){bodyElement.unbind("keyup");var q=$q.defer();return null===modal&&(modal=openInstance),$(htmlElement).removeClass("has-open-modal"),$animate.leave(modal.element).then(function(){openInstance=null,q.resolve("ended")}),q.promise}var linker,bodyElement=angular.element($window.document.body),htmlElement=$("html"),$modal={},options=$modal.$options=angular.extend({},defaults),fetchPromises={};return $modal.show=function(){$modal.$element=linker(options.scope,function(){}),enterModal()},$modal.hide=function(){leaveModal()},$modal.open=function(config){var modalResultDeferred=$q.defer(),modalOpenedDeferred=$q.defer(),modalInstance={result:modalResultDeferred.promise,opened:modalOpenedDeferred.promise,close:function(result){leaveModal(null).then(function(){modalResultDeferred.resolve(result)})},dismiss:function(reason){leaveModal(null).then(function(){modalResultDeferred.reject(reason)})}},resolveIter=1;config=angular.extend({},defaults,config),config.resolve=config.resolve||{};var templateAndResolvePromise;return templateAndResolvePromise=angular.isDefined(config.templateUrl)?$q.all([fetchTemplate(config.templateUrl)].concat(fetchResolvePromises(config.resolve))):$q.all([config.template].concat(fetchResolvePromises(config.resolve))),templateAndResolvePromise.then(function(tplAndVars){var modalScope=(config.scope||$rootScope).$new();modalScope.$close=modalInstance.close,modalScope.$dismiss=modalInstance.dismiss;var ctrlInstance,ctrlConstant={};ctrlConstant.$scope=modalScope,ctrlConstant.$modalInstance=modalScope,angular.forEach(config.resolve,function(value,key){ctrlConstant[key]=tplAndVars[resolveIter++]}),config.controller&&(ctrlInstance=$controller(config.controller,ctrlConstant)),config.controllerAs&&(modalScope[config.controllerAs]=ctrlInstance),enterModal(modalInstance,{scope:modalScope,content:tplAndVars[0],windowTemplateUrl:config.template})}),modalInstance},$modal}})}();
//# sourceMappingURL=tink-modal-angular.min.map